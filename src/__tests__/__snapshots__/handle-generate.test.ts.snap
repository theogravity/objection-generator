// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`handle-generator should generate a knex migration 1`] = `
"async function up (knex) {
  await knex.schema.createTable('persons', table => {
    table.string('id')
    table.string('name', 100).notNullable()
    table.integer('age')
    table.enu('gender', ['Male', 'Female', 'Other']).defaultTo('Female')
    table
      .string('username', 25)
      .notNullable()
      .defaultTo('default-user')
    table.datetime('created').defaultTo(knex.fn.now())

    table.primary(['id'])

    table.unique(['username'], 'uniq_username')

    table.index(['age', 'name'], 'name_age_index')
  })
  await knex.schema.createTable('movies', table => {
    table.string('id')
    table.string('name', 255).notNullable()

    table.primary(['id'])
  })
  await knex.schema.createTable('reviews', table => {
    table.string('review_id')
    table.string('author_id').notNullable()
    table.string('movie_id').notNullable()
    table.string('content')

    table.primary(['review_id'])
  })
}

async function down (knex) {
  await knex.schema.dropTable('persons')
  await knex.schema.dropTable('movies')
  await knex.schema.dropTable('reviews')
}

module.exports = {
  up,
  down
}
"
`;

exports[`handle-generator should generate objection models 1`] = `
"import path from 'path'

import { BaseModel } from './BaseModel'

export class MovieModel extends BaseModel {
  id: string
  name: string

  static tableName = 'movies'

  static get jsonSchema () {
    return {
      type: 'object',
      required: ['name'],
      properties: {
        id: {
          type: 'string'
        },
        name: {
          type: 'string',
          minLength: 1,
          maxLength: 255
        }
      }
    }
  }

  static get relationMappings () {
    return {
      reviews: {
        relation: Model.HasManyRelation,
        modelClass: path.join(__dirname, 'ReviewModel'),
        join: {
          from: 'movie.id',
          to: 'review.movieId'
        }
      }
    }
  }
}
"
`;

exports[`handle-generator should generate objection models 2`] = `
"import path from 'path'

import { BaseModel } from './BaseModel'

export class ReviewModel extends BaseModel {
  reviewId: string
  authorId: string
  movieId: string
  content: string

  static tableName = 'reviews'

  static get jsonSchema () {
    return {
      type: 'object',
      required: ['authorId', 'movieId'],
      properties: {
        reviewId: {
          type: 'string'
        },
        authorId: {
          type: 'string'
        },
        movieId: {
          type: 'string'
        },
        content: {
          type: 'string'
        }
      }
    }
  }

  static get idColumn () {
    return 'reviewId'
  }

  static get relationMappings () {
    return {
      author: {
        relation: Model.HasOneRelation,
        modelClass: path.join(__dirname, 'PersonModel'),
        join: {
          from: 'reviews.authorId',
          to: 'persons.id'
        }
      }
    }
  }
}
"
`;
